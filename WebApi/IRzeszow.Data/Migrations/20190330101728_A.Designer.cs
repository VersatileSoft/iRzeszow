// <auto-generated />
using System;
using IRzeszow.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IRzeszow.Data.Migrations
{
    [DbContext(typeof(IRzeszowDbContext))]
    [Migration("20190330101728_A")]
    partial class A
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IRzeszow.Data.Model.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyDataId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("HashedPassword")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.Property<byte[]>("Salt");

                    b.Property<int?>("UserDataId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyDataId")
                        .IsUnique()
                        .HasFilter("[CompanyDataId] IS NOT NULL");

                    b.HasIndex("UserDataId")
                        .IsUnique()
                        .HasFilter("[UserDataId] IS NOT NULL");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("IRzeszow.Data.Model.CompanyData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("CompanyName");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("CompanyDatas");
                });

            modelBuilder.Entity("IRzeszow.Data.Model.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<int>("OwnerAccountId");

                    b.Property<string>("PostType");

                    b.Property<int>("Profession");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("OwnerAccountId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("IRzeszow.Data.Model.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("IRzeszow.Data.Model.TagToPost", b =>
                {
                    b.Property<int>("PostId");

                    b.Property<int>("TagId");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TagToPosts");
                });

            modelBuilder.Entity("IRzeszow.Data.Model.TagToUserData", b =>
                {
                    b.Property<int>("TagId");

                    b.Property<int>("UserDataId");

                    b.HasKey("TagId", "UserDataId");

                    b.HasIndex("UserDataId");

                    b.ToTable("TagToUserDatas");
                });

            modelBuilder.Entity("IRzeszow.Data.Model.UserData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Gender");

                    b.Property<string>("Name");

                    b.Property<int>("Profession");

                    b.Property<string>("Surename");

                    b.HasKey("Id");

                    b.ToTable("UserDatas");
                });

            modelBuilder.Entity("IRzeszow.Data.Model.Account", b =>
                {
                    b.HasOne("IRzeszow.Data.Model.CompanyData", "CompanyData")
                        .WithOne("Account")
                        .HasForeignKey("IRzeszow.Data.Model.Account", "CompanyDataId");

                    b.HasOne("IRzeszow.Data.Model.UserData", "UserData")
                        .WithOne("Account")
                        .HasForeignKey("IRzeszow.Data.Model.Account", "UserDataId");
                });

            modelBuilder.Entity("IRzeszow.Data.Model.Post", b =>
                {
                    b.HasOne("IRzeszow.Data.Model.Account", "OwnerAccount")
                        .WithMany()
                        .HasForeignKey("OwnerAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IRzeszow.Data.Model.TagToPost", b =>
                {
                    b.HasOne("IRzeszow.Data.Model.Post", "Post")
                        .WithMany("Tags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IRzeszow.Data.Model.Tag", "Tag")
                        .WithMany("Posts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IRzeszow.Data.Model.TagToUserData", b =>
                {
                    b.HasOne("IRzeszow.Data.Model.Tag", "Tag")
                        .WithMany("UserDatas")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IRzeszow.Data.Model.UserData", "UserData")
                        .WithMany("Tags")
                        .HasForeignKey("UserDataId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
